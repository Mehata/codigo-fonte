#!/usr/bin/env nodejs

require('rootpath')()
var config = require('../config').get(process.env.NODE_ENV)
// var normalizePort = require('normalize-port')
var https = require('https')
var http = require('http')
var app = require('../app')
console.log('\t+---------------------+')
console.log('\t| Starting App Server |')
console.log('\t+---------------------+')
console.log('\n\tThis is a model app framework')
console.log('\tthat can be start only crianting new certificate keys')
console.log('\twith this command: criador_de_certificados.sh \n\n')
// console.log('config=' + JSON.stringify(config))

// --------< SOCKET.IO >--------------------------------------------+
// Util usar server separado para reusar o HTTP server para fazer   |
// bind tmb com socket.io, na mesma instancia.                      |
//                                                                  |
//     -- Exemplo:                                                  |
//    #-----------------------------------------------------#       |
//    | var server  = require('http').createServer(app)     |       |
//    | var io      = require('socket.io').listen(server)   |       |
//    | ...                                                 |       |
//    |  server.listen(1234)                                |       |
//    #-----------------------------------------------------#       |
// -----------------------------------------------------------------+

/**
 * Create HTTP/HTTPS servers.
 * Criando os servers para ouvir nas portas 80,443 e amarrando no App Express
 * Config => ./config/index.js
 */
var httpserver = http.createServer(app)
httpserver.listen(config.server.http_port)
var httpsserver = https.createServer(config.certificate_options, app)
httpsserver.listen(config.server.https_port)

const io = require('socket.io').listen(httpsserver)
var nodes = []

// listen on every connection
io.on('connection', (socket) => {
  console.log('New user connected')
  console.log('Conn.ID: ' + socket.client.conn.id + '(' + socket.client.conn.remoteAddress + ')')
  // default username
  socket.username = 'Server'
  socket.hostname = ''

  // listen on change_username
  socket.on('username', (data) => {
    socket.username = data.username
  })

  socket.on('hostversion', (data) => {
    socket.hostversion = data.message
    var hostname = data.hostname
    var hostconfig = data.hostconfig
    console.log(' FUNCAO PRINCIPAL DESSE SERVIDOR(mainfunction) ...  "hostconfig":' + JSON.stringify(hostconfig))
    socket.emit('message', { message: data.message })
    var i
    for (i = 0; i < nodes.length; ++i) {
      // procurando a posicao certa para fazer a atualicao.
      if (nodes[i].hostname == hostname) {
        nodes[i].version = data.message
        nodes[i].hostconfig = data.hostconfig
        // fez a atualizacao sai fora, senao lÃ¡ em baixo vai criar um novo denovo.
        return 
      }
    }
    nodes.push({ hostname: hostname, version: data.message, hostconfig: data.hostconfig })
  })

  // listen on new_message
  socket.on('message', (data) => {
    // broadcast the new message
    io.sockets.emit('message', { message: data.message, username: socket.username })
    if (data.message === 'devops') {
      io.sockets.emit('message', { message: 'devops', username: socket.username })
    }
    if (data.message === 'ntp') {
      io.sockets.emit('command', { message: 'ntpdate ntp.cais.rnp.br', username: socket.username })
    }
    if (data.message === 'ntp2014') {
      io.sockets.emit('command', { message: 'ntp2014', username: socket.username })
    }
    if (data.message === 'version') {
      const { exec } = require('child_process')
      exec('cd /root/shell ; /root/shell/linux/cdshell -g | cut -f2 -d: ', (err, stdout, stderr) => {
        socket.emit('message', { message : stdout })
      })
    }
  })

  socket.on('beos', (data) => {
    // broadcast the new message
    io.sockets.emit('beos', { message: data.message, username: socket.username })
  })

  socket.on('command', (data) => {
    //  broadcast the new message
    io.sockets.emit('distributed', { message: data.message, username: socket.username })
    console.log('DISTRIBUTING [ ' + data.message + ' ] on nodes...')
  })

  socket.on('sair', (data) => {
    // broadcast the new message
    socket.emit('sair', { message: data.message, username: socket.username })
  })

  socket.on('version', (data) => {
    if (data.message === 'hostversion') {
      socket.emit('message', { message: data.message })
      console.log('VERSION VAZIA ENVIADA' + data.message)
    }
    if (data.message === 'CDSHELL') {
      // io.sockets.emit('command', {message : "ntpdate ntp.cais.rnp.br", username : socket.username});
      const { exec } = require('child_process')
      exec('cd /root/shell ; /root/shell/linux/cdshell -g', (err, stdout, stderr) => {
        if (err) {
          console.log('Error: ao executar cdshell -g')
        } else {
          socket.emit('message', { message: stdout })
        }
      })
    }
    if (data.message === 'sistemas') {
      // io.sockets.emit('command', {message : "ntpdate ntp.cais.rnp.br", username : socket.username});
      const { exec } = require('child_process')
      exec('cd /root/sistemas ; /root/shell/linux/cdshell -g', (err, stdout, stderr) => {
        socket.emit('message', { message: stdout })
      })
    }
  })

  // listen on typing
  socket.on('typing', (data) => {
    socket.broadcast.emit('typing', { username: socket.username })
  })

  socket.on('hostexec', (data) => {
    // broadcast the new message
    io.sockets.emit('hostexec', { hostname: data.hostname, command: data.command })
  }) 

  socket.on('distribute_log', (data) => {
    //broadcast the new message
    io.sockets.emit('log.' + data.hostname, { saida: data.saida })
    console.log(data)
  })
})

const { exec } = require('child_process');
exec('cd /root/shell/push ; ./version.js ', () => {})

console.log('-------------------------------')
console.log('Servidor iniciado com sucesso.')
console.log('HTTP Port:    ' + config.server.http_port)
console.log('HTTPS Port:  ' + config.server.https_port)
console.log('-------------------------------\n\n\n')
